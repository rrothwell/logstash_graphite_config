# Configuration file to digest Apache access logs and OpenStack Keystone logs.
# Used to produce combined researcher login and API login logs for the NeCTAR Dashboard.
# Test using the command line:
#  rm ~/.sincedb_*; ./bin/logstash -f /Users/developer/git/logstash_config/configuration/login_stats_graphite3.conf

input {
    file {
        path => "/Users/developer/git/logstash_config/login_logs/access-*.log"
        start_position => beginning
    }
}

filter {
    if [path] =~ "accounts" {
        mutate { replace => { "type" => "user_access" } }
        grok {
            # The auth field produced by Shibboleth does not the Regex for auth used by LogStash 1.4.2. So we use this custom one.
            match => { "message" => "%{IPORHOST:clientip} %{USER:ident} %{NOTSPACE:auth} \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response}" }
        }
        date {
            match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
        }
        mutate {
            remove_field => [ "host", "path", "clientip", "ident", "httpversion",  "message"]
        }
    } else if [path] =~ "keystone" {
        mutate { replace => { type => "keystone_access" } }
        grok {
            match => { "message" => "%{TIMESTAMP_ISO8601:log_timestamp} %{HOSTNAME:client_hostname} %{HOSTNAME:server_hostname}: %{POSINT:server_port} %{IP:ipaddress0} %{IP:ipaddress1} - - \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response}" }
        }
        date {
            match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
        }
        mutate {
            remove_field => [ "host", "path", "message", "log_timestamp", "client_hostname", "ipaddress0", "ipaddress1"]
        }
    } else {
        mutate { replace => { type => "unclassified_access" } }
    }
    
    if [type] == "user_access" {
        # http://docs.openstack.org/developer/keystone/http-api.html
        if [auth] =~ /^https:\/\/aaf1-idp\.its\.utas\.edu\.au\/idp\/shibboleth!https:\/\/keystone\.rc\.nectar\.org\.au\/shibboleth!/ {
            if [request] =~ /\/rcshibboleth\/$/  and [verb] == "GET" and [response] == "200" {
                ruby {
                    code => "
                    timestamp = event['@timestamp']
                    if $user_start_hour.nil?
                        time_array = timestamp.to_a
                        time_array[0] = 0
                        time_array[1] = 0
                        $user_start_hour = Time.local *time_array
                        $user_end_hour = $user_start_hour + $user_bucket_seconds
                    end
                    in_bucket = ($user_start_hour.to_i <= timestamp.to_i) && (timestamp.to_i < $user_end_hour.to_i)
                    event['index'] = $user_count
                    if in_bucket
                        $user_count = $user_count + 1
                        return false                        
                    else
                        event['aggregate_count'] = $user_count
                        event['aggregate_timestamp'] = $user_end_hour
                        $user_count = 1
                        timestamp = event['@timestamp']
                        time_array = timestamp.to_a
                        time_array[0] = 0
                        time_array[1] = 0
                        $user_start_hour = Time.local *time_array
                        $user_end_hour = $user_start_hour + $user_bucket_seconds
                        return true                     
                    end
                   "
                    init => "$user_count = 0
                        $user_bucket_seconds = 3600"
                }
                if [aggregate_timestamp] {
                    clone {
                        clones => ["user_access_summary"]
                        add_tag => [ "summary" ]
                        remove_field => ["@timestamp", "auth", "verb", "request", "response", "index"]
                    }
                    ruby {
                        code => "
                            if  event['type'] == 'user_access_summary'
                                event['@timestamp'] = event['aggregate_timestamp']
                            end
                        "
                    }
                }
            }
        }
    } else if [type] == "keystone_access" {
        if [server_hostname] =~ /^keystone.rc.nectar.org.au$/  and [verb] == "POST" and [request] =~ /tokens/ and [response] == "200" {
            if [server_port] == "5000" {
				mutate {
					add_tag => [ "public"]
				}
                ruby {
                    code => "
                    timestamp = event['@timestamp']
                    if $keystone_public_start_hour.nil?
                        time_array = timestamp.to_a
                        time_array[0] = 0
                        time_array[1] = 0
                        $keystone_public_start_hour = Time.local *time_array
                        $keystone_public_end_hour = $keystone_public_start_hour + $keystone_public_bucket_seconds
                    end
                    in_bucket = ($keystone_public_start_hour.to_i <= timestamp.to_i) && (timestamp.to_i < $keystone_public_end_hour.to_i)
                    event['index'] = $keystone_public_count
                    if in_bucket
                        $keystone_public_count = $keystone_public_count + 1
                        return false                        
                    else
                        event['aggregate_count'] = $keystone_public_count
                        event['aggregate_timestamp'] = $keystone_public_end_hour
                        $keystone_public_count = 1
                        timestamp = event['@timestamp']
                        time_array = timestamp.to_a
                        time_array[0] = 0
                        time_array[1] = 0
                        $keystone_public_start_hour = Time.local *time_array
                        $keystone_public_end_hour = $keystone_public_start_hour + $keystone_public_bucket_seconds
                        return true                     
                    end
                   "
                    init => "$keystone_public_count = 0
                        $keystone_public_bucket_seconds = 3600"
                }
                if [aggregate_timestamp] {
                    clone {
                        clones => ["keystone_access_summary"]
                        add_tag => [ "summary" ]
                        remove_field => ["@timestamp", "auth", "verb", "request", "response", "server_hostname", "server_port", "httpversion", "index"]
                    }
                    ruby {
                        code => "
                            if  event['type'] == 'keystone_access_summary'
                                event['@timestamp'] = event['aggregate_timestamp']
                            end
                        "
                    }
                }
            } else if [server_port] == "35357" {
				mutate {
					add_tag => [ "admin"]
				}
                ruby {
                    code => "
                    timestamp = event['@timestamp']
                    if $keystone_admin_start_hour.nil?
                        time_array = timestamp.to_a
                        time_array[0] = 0
                        time_array[1] = 0
                        $keystone_admin_start_hour = Time.local *time_array
                        $keystone_admin_end_hour = $keystone_admin_start_hour + $keystone_admin_bucket_seconds
                    end
                    in_bucket = ($keystone_admin_start_hour.to_i <= timestamp.to_i) && (timestamp.to_i < $keystone_admin_end_hour.to_i)
                    event['index'] = $keystone_admin_count
                    if in_bucket
                        $keystone_admin_count = $keystone_admin_count + 1
                        return false                        
                    else
                        event['aggregate_count'] = $keystone_admin_count
                        event['aggregate_timestamp'] = $keystone_admin_end_hour
                        $keystone_admin_count = 1
                        timestamp = event['@timestamp']
                        time_array = timestamp.to_a
                        time_array[0] = 0
                        time_array[1] = 0
                        $keystone_admin_start_hour = Time.local *time_array
                        $keystone_admin_end_hour = $keystone_admin_start_hour + $keystone_admin_bucket_seconds
                        return true                     
                    end
                   "
                    init => "$keystone_admin_count = 0
                        $keystone_admin_bucket_seconds = 3600"
                }
                if [aggregate_timestamp] {
                    clone {
                        clones => ["keystone_access_summary"]
                        add_tag => [ "summary" ]
                        remove_field => ["@timestamp", "auth", "verb", "request", "response", "server_hostname", "server_port", "httpversion", "index"]
                    }
                    ruby {
                        code => "
                            if  event['type'] == 'keystone_access_summary'
                                event['@timestamp'] = event['aggregate_timestamp']
                            end
                        "
                    }
                }
            }
        }
    }
}

output {
    if "summary" in [tags] {
        if [type] == "user_access_summary"{
            stdout { codec => rubydebug }
            #graphite {
            #    host => "127.0.0.1"
            #    port => 2003
            #    metrics => ["account", "%{count}"]
            #    metrics_format => "logins.*.count"
            #}
        } else if [type] == "keystone_access_summary" {
            if "public" in [tags] {
                stdout { codec => rubydebug }
                    #graphite {
                    #    host => "127.0.0.1"
                    #    port => 2003
                    #    metrics => ["keystone.public", "1.0"]
                    #    metrics_format => "logins.*.count"
                    #}
            } else if "admin" in [tags] {
                stdout { codec => rubydebug }
                    #graphite {
                    #    host => "127.0.0.1"
                    #    port => 2003
                    #    metrics => ["keystone.admin", "1.0"]
                    #    metrics_format => "logins.*.count"
                    #}
            }
        }
   }
        #elasticsearch {
        #    host => localhost
        #}
        #stdout { codec => rubydebug }

}